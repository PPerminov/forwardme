#!/usr/bin/env bash

ITEM=$1
DEFAULT=$2
WHAT="all"
NAMESPACE="--all-namespaces"

RED='\033[1;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
WHITE='\033[1;37m'
ORANGE='\033[0;33m'
NC='\033[0m'
help() {
  printf "${NC}Usage:\n${YELLOW}port-forward ${RED}what_to_forward ${GREEN}[default]${NC}\nYou will see a menu to choose options to use.\nIf you will use ${GREEN}default${NC} key then it will took ${RED}FIRST COINCIDING SERVICE FROM CURRENT NAMESPACE${NC} and forward it to the same local port.\nSay you want to forward ${YELLOW}grafana${NC} service with default parameter active.\nSay you have two grafana services in your active namespace: ${YELLOW}grafana-0${NC} with port ${WHITE}80${NC} and ${YELLOW}grafana-server${NC} with port ${WHITE}5000${NC} exposed.\nYou will run ${YELLOW}port-forward ${RED}grafana ${GREEN}default${NC} and script will forward service grafana-0${NC} to localhost:3580${NC}\n"
  exit 1
}

[[ "$ITEM" == "-h" ]] || [[ "$ITEM" == "--help" ]] || [[ -z "$ITEM" ]] && help

[[ -n $DEFAULT ]] && NAMESPACE="" && WHAT="service"

get_namespace() {
  echo "$1" | awk '{print $1}'
}

get_name() {
  echo "$1" | awk '{print $2}'
}

get_type() {
    echo "$1" | awk '{print $3}'
}

get_port() {
  echo "$1" | cut -d ':' -f 1
}

get_proto() {
  echo "$1" | cut -d ':' -f 2
}

choose_number() {
  read -r -p 'Choose an option (1 is default): ' position
  echo "$position"
}

what_do_we_found=$(kubectl get $WHAT $NAMESPACE --no-headers=true -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,TYPE:.kind | grep "$ITEM" | grep -E 'Pod|Service')

if [[ -n $what_do_we_found ]]; then
  echo "Choose what do you want"
  position=1
  choosen_one=1
  while read i
  do
    printf "${RED}$position${NC}) ${YELLOW}$(get_type "$i") ${GREEN}$(get_name "$i")${NC} in namespace ${WHITE}$(get_namespace "$i")${NC}\n"
    position=$((position + 1))
  done <<< "$what_do_we_found"
  [[ -z $DEFAULT ]] && choosen_one="$(choose_number)"
  selected=$(echo "$what_do_we_found" | sed -n "$choosen_one"p)
  name=$(get_name "$selected")
  type=$(get_type "$selected")
  namespace=$(get_namespace "$selected")
  echo You choosed "$type" "$name" in namespace "$namespace"
  case $type in
  "Service")
    data=$(kubectl get svc -n "$namespace" "$name" -o go-template='{{range.spec.ports}}{{.port}}{{":"}}{{.protocol}}{{"\n"}}{{end}}')
    echo "Which port to connect?"
    position=1
    choosen_one=1
    for i in $data; do
      proto=$(get_proto "$i")
      port=$(get_port "$i")
      printf "${RED}$position${NC}) ${YELLOW}$proto ${GREEN} $port${NC}\n"
      position=$((position + 1))
    done
    [[ -z $DEFAULT ]] && choosen_one="$(choose_number $position)"
    selected=$(echo "$data" | sed -n "$choosen_one"p)
    proto=$(get_proto "$selected")
    port=$(get_port "$selected")
    [[ -z $DEFAULT ]] &&  read -r -p 'Choose a localport to forward (the same as remote by default): ' localport
    if [[ -z $localport ]]; then
      localport=$port
    fi
    if [[ $localport -le 1000 ]]; then
        localport="35"$localport
    fi
    kubectl port-forward -n "$namespace" "$type"/"$name" "$localport":"$port"
    ;;
  "Pod")
    data=$(kubectl get pod -n "$namespace" "$name" -o go-template='{{range.spec.containers}}{{range.ports}}{{.containerPort}}{{":"}}{{.protocol}}{{"\n"}}{{end}}{{end}}')
    echo "Which port to connect?"
    position=1
    for i in $data; do
      proto=$(get_proto "$i")
      port=$(get_port "$i")
      printf "${RED}$position${NC}) ${YELLOW}$proto ${GREEN} $port${NC}\n"
      position=$((position + 1))
    done
    choosen_one="$(choose_number $position)"
    selected=$(echo "$data" | sed -n "$choosen_one"p)
    proto=$(get_proto "$selected")
    port=$(get_port "$selected")
    read -r -p 'Choose a localport to forward (the same as remote by default if it is from high ports. adding 35 to hte beginning if not): ' localport
    if [[ -z $localport ]]; then
      localport=$port
    fi
    if [[ $localport -le 1000 ]]; then
        localport="35"$localport
    fi
    kubectl port-forward -n "$namespace" "$type"/"$name" "$localport":"$port"
    ;;
  esac
else
  echo No such nothing
  exit 2
fi
